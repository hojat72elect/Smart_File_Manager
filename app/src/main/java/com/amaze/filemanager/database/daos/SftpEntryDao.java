package com.amaze.filemanager.database.daos;

import static com.amaze.filemanager.database.UtilitiesDatabase.COLUMN_HOST_PUBKEY;
import static com.amaze.filemanager.database.UtilitiesDatabase.COLUMN_NAME;
import static com.amaze.filemanager.database.UtilitiesDatabase.COLUMN_PATH;
import static com.amaze.filemanager.database.UtilitiesDatabase.COLUMN_PRIVATE_KEY;
import static com.amaze.filemanager.database.UtilitiesDatabase.COLUMN_PRIVATE_KEY_NAME;
import static com.amaze.filemanager.database.UtilitiesDatabase.TABLE_SFTP;

import androidx.room.Dao;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;
import androidx.room.Update;

import com.amaze.filemanager.database.models.utilities.SftpEntry;

import java.util.List;

import io.reactivex.Completable;
import io.reactivex.Single;

/**
 * {@link Dao} interface definition for {@link SftpEntry}. Concrete class is generated by Room
 * during build.
 *
 * @see Dao
 * @see SftpEntry
 * @see com.amaze.filemanager.database.UtilitiesDatabase
 */
@Dao
public interface SftpEntryDao {

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    Completable insert(SftpEntry instance);

    @Update
    Completable update(SftpEntry instance);

    @Query("SELECT * FROM " + TABLE_SFTP)
    Single<List<SftpEntry>> list();

    @Query("SELECT * FROM " + TABLE_SFTP + " WHERE " + COLUMN_NAME + " = :name")
    Single<SftpEntry> findByName(String name);

    @Query(
            "SELECT " + COLUMN_HOST_PUBKEY + " FROM " + TABLE_SFTP + " WHERE " + COLUMN_PATH + " = :uri")
    Single<String> getRemoteHostKey(String uri);

    @Query(
            "SELECT "
                    + COLUMN_PRIVATE_KEY_NAME
                    + " FROM "
                    + TABLE_SFTP
                    + " WHERE "
                    + COLUMN_PATH
                    + " = :uri")
    Single<String> getSshAuthPrivateKeyName(String uri);

    @Query(
            "SELECT " + COLUMN_PRIVATE_KEY + " FROM " + TABLE_SFTP + " WHERE " + COLUMN_PATH + " = :uri")
    Single<String> getSshAuthPrivateKey(String uri);

    @Query("DELETE FROM " + TABLE_SFTP + " WHERE " + COLUMN_NAME + " = :name")
    Completable deleteByName(String name);

    @Query(
            "DELETE FROM "
                    + TABLE_SFTP
                    + " WHERE "
                    + COLUMN_NAME
                    + " = :name AND "
                    + COLUMN_PATH
                    + " = :path")
    Completable deleteByNameAndPath(String name, String path);
}
